# redis-backed high score and game client server
# Author: Steven Ruppert

http = require \http
url = require \url
fs = require \fs
path = require \path
mime = require \mime
redis = require \redis

# respond with 500 errors
error = (err, res) ->
	console.error err
	res.writeHead 500 \Content-Type : \text/plain
	res.end "Something has gone horribly wrong!"

# respond with 404
fourohfour = (res) ->
	res.writeHead 404 \Content-Type : \text/plain
	res.end "Resource not found"

# redis connection, so we can store the high scores list
# as a single JSON string, in a single redis key
# surely, the best use of such an advanced data store

# stupid redis client (and heroku) requires separate port and url
# so we have to reconstruct the given url
try
	if process.env.REDISTOGO_URL
		u = url.parse that
		db = redis.createClient u.port, u.hostname
		db.auth u.auth.split(\:).1 # extract password from user:pass
	else
		db = redis.createClient!
	db.on \error -> console.error it # simple error logging
catch e
	console.error "couldn't connect to redis!"
	console.error e
	process.exit 1

# bootstrap scores if they don't exist
db.get \scores (err, scores) ->
	if err
		console.error "couldn't fetch scores!"
		console.error err
		process.exit 1
	unless scores?
		console.log "bootstrapping high scores"
		db.set do
			\scores
			JSON.stringify [ 
				* name: \mario score: 384
				* name: \luigi score: 253
				* name: \wario score: 231
				* name: \bowser score: 133
				* name: \toad score: 27
			]
			(err, reply) ->
				if err
					console.error "couldn't bootstrap scores!"
					console.error err
					process.exit 1

# could've used express to make this easier, but that's boring
http.createServer ({method}: req, res) ->

	{pathname} = url.parse req.url

	if method is \GET
		if pathname is \/scores

			(err, scores) <- db.get \scores
			return error err, res if err

			res.writeHead 200 \Content-Type : \application/json
			res.end scores
		else
			# serve static assets from public folder
			filename = path.join \public pathname
			
			(exists) <- path.exists filename
			return fourohfour res unless exists
			
			(err, stat) <- fs.stat filename
			return error err, res if err

			# handle / root to index.html
			filename += \index.html if stat.isDirectory!

			(err, file) <- fs.readFile filename
			return error err, res if err

			res.writeHead 200 \Content-Type : mime.lookup filename
			res.end file, \binary # serve file

	else if method is \POST and pathname is \/scores # handle POST /scores to update list
		req.setEncoding \utf8 # expect utf-8 JSON

		content = ''
		req.addListener \data -> content += it # collect chunks of data

		<- req.addListener \end # when it's all here
		
		# make sure the content is valid JSON
		# kind of silly since we stringify it to persist it anyway
		try scores = JSON.parse content catch e then return error e, res

		# persist to database
		# technically clients could post any JSON structure and it would overwrite
		# the previous score list, but lets pretend they can't
	
		(err, reply) <- db.set \scores JSON.stringify scores
		return error err, res if err

		res.writeHead 200 'Content-Type': 'text/plain'
		res.end 'scores updated'
	else
		fourohfour res

.listen process.env.PORT || 1337 # use heroku's PORT variable

console.log 'Server started!'

